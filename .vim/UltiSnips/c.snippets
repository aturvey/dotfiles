# doxygen file header (for .c files)
snippet docc "Doxygen file header (docc)" b
/**
 *  @file   `!v expand("%:t")`
 *  @brief  ${1:< brief description >}
 *
 *  ${2:< detailed description >}
 *
 *  @author `echo $USER`
 *  @date   `!v strftime("%c")`
 *
 *  @bug    No known bugs.
 *
 */

endsnippet


# doxygen function header (for .c files)
snippet docf "Doxygen function header (docf))" b
/**
 *  @brief  ${1:< brief description >}
 *
 *  ${2:< detailed description >}
 *
 *  @param  ${3:<var> <description>}
 *  @return ${4:< returns >}
 *
 */
endsnippet


# doxygen post-variable documentation (for .c files)
snippet vdoc "Doxygen post-variable documentation (vdoc))" 
/**< ${1:< description >} */
endsnippet


# doxygen pre-variable documentation (for .c files)
snippet docv "Doxygen pre-variable documentation (docv))" 
/** ${1:< description >} */
endsnippet


# general purpose comment block (for .c files)
snippet comb "General purpose C comment block (comb)" b
/*
 *  ${1:< comment >}
 */
endsnippet


# general purpose comment line (for .c files)
snippet coml "General purpose C comment line (coml)" b
/* ${1:< comment >} */
endsnippet


# include "..."
snippet inc "include 'filename.h' (inc)" b
#include "${1:`!v expand("%:r")`}.h"

endsnippet


# include <...>
snippet Inc "include <...> (Inc)" b
#include <${1:stdio}.h>

endsnippet


# main function call 
snippet main "main() template (main)" b
int main(int argc, char *argv[]) {

    ${VISUAL}$0
    return 0;

}
endsnippet


# for loop
snippet for "for loop (for)" b
for ( int i = 0; i < ${1:COUNT}; i++ ) {
    ${VISUAL}$0
}
endsnippet


# while loop
snippet while "while loop (while)" b
while ( ${1:0} ) {
    ${VISUAL}$0
}
endsnippet


# do loop
snippet do "do loop (do)" b
do {
    ${VISUAL}${0}
} while ( ${1:1} )
endsnippet


# ternary conditional
snippet tern "ternary conditional (tern)"
${1} ? ${2:a} : ${3:b}
endsnippet


# struct
snippet struct "struct definition (struct)" b
typedef struct _${1:name}_t {
    ${0:int c;}
} $1_t;

$1_t ${2:sObject};

endsnippet


# case
snippet case "case statement (case)" b
switch ( ${1:<expression>} ) {
    case ${2:x}:   ${3:action()};
                break;
    default:    ${4:action()};
}

endsnippet


# enum
snippet enum "enum declation (enum)" b
enum ${1:<identifier>} { ${2:<list>} };

endsnippet
